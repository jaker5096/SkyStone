package org.firstinspires.ftc.teamcode._Test._AutoLib;


import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;

import org.firstinspires.ftc.teamcode._Libs.AutoLib;

// This test illustrates using a shared Context object to share data among multiple Steps
@Disabled
class Context {
    public int value1;
    public String value2;
    public float value3;
}

// example of a Step that generates some data to be communicated to subsequent Steps
class DataSourceStep1 extends AutoLib.Step {
    Context _ctx;
    public DataSourceStep1(Context ctx) {
        _ctx = ctx;
    }
    public boolean loop() {
        super.loop();
        _ctx.value1 = 1;
        _ctx.value2 = "two";
        _ctx.value3 = 3.0f;
        return true;    // done
    }
}

// example of another Step that updates some of the data communicated to subsequent Steps
class DataSourceStep2 extends AutoLib.Step {
    Context _ctx;
    public DataSourceStep2(Context ctx) {
        _ctx = ctx;
    }
    public boolean loop() {
        super.loop();
        _ctx.value1 = loopCount()*10;
        _ctx.value2 = "twenty";
        _ctx.value3 = 30.0f;
        return true;    // done
    }
}

// examples of Steps that use data generated by a previous Step
class DataUserStep1 extends AutoLib.LogTimeStep {
    Context _ctx;
    OpMode _opMode;
    public DataUserStep1(OpMode opMode, double seconds, Context ctx)
    {
        super(opMode, "DataUserStep1", seconds);
        _opMode = opMode;
        _ctx = ctx;
    }
    public boolean loop() {
        _opMode.telemetry.addData("uses value1", _ctx.value1);
        return super.loop();
    }
}

class DataUserStep2 extends AutoLib.LogTimeStep {
    Context _ctx;
    OpMode _opMode;
    public DataUserStep2(OpMode opMode, double seconds, Context ctx)
    {
        super(opMode, "DataUserStep2", seconds);
        _opMode = opMode;
        _ctx = ctx;
    }
    public boolean loop() {
        _opMode.telemetry.addData("uses value2", _ctx.value2);
        return super.loop();
    }
}

class DataUserStep3 extends AutoLib.LogTimeStep {
    Context _ctx;
    OpMode _opMode;
    public DataUserStep3(OpMode opMode, double seconds, Context ctx)
    {
        super(opMode, "DataUserStep3", seconds);
        _opMode = opMode;
        _ctx = ctx;
    }
    public boolean loop() {
        _opMode.telemetry.addData("uses value3", _ctx.value3);
        return super.loop();
    }
}


@Autonomous(name="Test: Step Shared Context Test", group ="Test")
@Disabled
public class AutoTest5 extends OpMode {

    AutoLib.Sequence mSequence;     // the root of the sequence tree
    boolean bDone;                  // true when the programmed sequence is done

    public AutoTest5() {
    }

    public void init() {
        // create the root Sequence for this autonomous OpMode
        mSequence = new AutoLib.LinearSequence();

        // create an instance of a shared data context object
        Context ctx = new Context();

        // populate the Sequence with a Data generating Step and some Steps that then use that data
        mSequence.add(new DataSourceStep1(ctx));        // create some data used by subsequent steps
        mSequence.add(new DataUserStep1(this, 5, ctx));
        mSequence.add(new DataUserStep2(this, 5, ctx));
        mSequence.add(new DataUserStep3(this, 5, ctx));

        // update some of the data used by other steps, which run concurrently this time
        AutoLib.ConcurrentSequence cs1 = new AutoLib.ConcurrentSequence();
        cs1.add(new DataSourceStep2(ctx));
        cs1.add(new DataUserStep1(this, 5, ctx));
        cs1.add(new DataUserStep2(this, 5, ctx));
        cs1.add(new DataUserStep3(this, 5, ctx));
        mSequence.add(cs1);

        // start out not-done
        bDone = false;
    }

    public void loop() {
        // until we're done, keep looping through the current Step(s)
        if (!bDone)
            bDone = mSequence.loop();       // returns true when we're done
        else
            telemetry.addData("sequence finished", "");
    }

    public void stop() {
        telemetry.addData("stop() called", "");
    }
}
